;;
;; my emacs configuration
;;
;;

;;
;; General Settings I like
;;

;; default tramp to ssh
;;(setq tramp-default-method "ssh")
;; Turn off the useless toolbar
(tool-bar-mode -1)
;; Show paren mode (http://www.emacswiki.org/emacs/ShowParenMode)
(show-paren-mode 1)
;; backup files because well backupfiles
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)
(setq delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t
)
;; default to text mode
(setq-default major-mode 'text-mode)
;; blink instead of beep
(setq visible-bell t)

;; show that damn whitespace
(setq show-trailing-whitespace t)

;; turn on abbrevs --> t h e C-x a g t e h <RET>
;; http://www.emacswiki.org/emacs/AbbrevMode
(setq-default abbrev-mode t)
(setq abbrev-file-name
      "~/.emacs.d/abbrev_defs")
(setq save-abbrevs t)

;; fixing up the scratch buffer
(setq initial-major-mode 'ruby-mode)
(setq initial-scratch-message "\
# This buffer is for notes you don't want to save, and for Ruby code.
# If you want to create a file, visit that file with C-x C-f,
# then enter the text in that file's own buffer.")

;; fix Warning(undo): Buffer Buffer list
(add-hook 'Buffer-menu-mode-hook 'buffer-disable-undo)

;; display date and time
(setq display-time-day-and-date t
      display-time-24hr-format t)
(display-time)

(defun insert-epoch () (interactive)
    (insert (shell-command-to-string "echo -n $(date +%s)")))
(defun insert-current-date () (interactive)
    (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))

;; highlight incremental search
(setq query-replace-highlight t)

;; make a larger buffer for M-x shell
(setq comint-buffer-maximum-size 10240)

;; tack on flyspell to text
(add-hook 'text-mode-hook 'flyspell-mode)
(setq ispell-program-name "aspell"
  ispell-extra-args '("--sug-mode=ultra"))
(global-set-key (kbd "M-s M-s") 'ispell-word)

;; visual-regex
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)

;; browse-url
(global-set-key (kbd "C-c b") 'browse-url-at-point)

;; dash-at-point
(global-set-key "\C-cd" 'dash-at-point)

;; Lorem-ipsum stuff
(autoload 'Lorem-ipsum-insert-paragraphs "lorem-ipsum" "" t)
(autoload 'Lorem-ipsum-insert-sentences "lorem-ipsum" "" t)
(autoload 'Lorem-ipsum-insert-list "lorem-ipsum" "" t)

;; Kill all other buffers
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

;; create scratch buffer
(defun create-scratch-buffer nil
  "create a scratch buffer"
  (interactive)
  (switch-to-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode))

;; auto centering
(setq
 scroll-conservatively 1000
 scroll-margin 0
 scroll-preserve-screen-position 1
 auto-window-vscroll nil)

;;
;; Stolen from mattray
;;

;; OSX SETTINGS
(setq default-frame-alist
      '((top . 25) (left . 1)
        (width . 125) (height . 35)))
(set-frame-parameter (selected-frame) 'alpha '(99 95))
(setq mac-option-key-is-meta nil)
(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)
(server-start) ;; so it's listening for the emacsclient alias
(setq ns-pop-up-frames nil) ;; keep OSX from opening more windows
;; 'y' instead of 'yes'
(fset 'yes-or-no-p 'y-or-n-p)
;; always use spaces, never tabs
(setq-default indent-tabs-mode nil)
(setq tab-width 2) ; set the tab width to two
;; skip startup message
(setq inhibit-startup-message t)
(global-set-key "\C-cc" 'comment-region)
(global-set-key "\C-cu" 'uncomment-region)
;; indent-region
(global-set-key "\C-ci" 'indent-region)
;; text size
(global-set-key "\M-+" 'text-scale-increase)
(global-set-key "\M-_" 'text-scale-decrease)
;;
;; end of the stealing from mattray
;;

;;
;; Extentions to emacs
;;

;; Add MELPA for packages --> http://melpa.milkbox.net/
(require 'package)

;; here there's a variable named package-archives, and we are adding the MELPA repository to it
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)

;; loads packages and activates them
(package-initialize)

;; Converted to the solarized-dark theme
;; I also like the wombat,wheatgrass, but lets start here
(load-theme 'solarized-dark t)

;; Everyone loves snippets
;; (yas-global-mode 1)

;; additional load-path
(add-to-list 'load-path "~/.emacs.d/plugins/")

;; homebrew fix
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))

;; ace-jump-mode
(global-set-key (kbd "C-c SPC") 'ace-jump-char-mode)

;; write out a region i've marked
(global-set-key (kbd "C-x w") 'write-region)

;; ido mode
(require 'ido)
(ido-mode t)

;; orgmode
(setq org-log-done 'time)
(setq org-default-notes-file (concat "~/org/notes.org"))
(define-key global-map "\C-ct" 'org-capture)
(setq org-export-backends (quote (ascii html icalendar latex md)))
(setq org-startup-indented t)

;; messing with fonts for macs
(when (eq system-type 'darwin)

  ;; default Latin font (e.g. Consolas)
  (set-face-attribute 'default nil :family "Consolas")

  ;; default font size (point * 10)
  ;;
  ;; WARNING!  Depending on the default font,
  ;; if the size is not supported very well, the frame will be clipped
  ;; so that the beginning of the buffer may not be visible correctly.
  (set-face-attribute 'default nil :height 165)

  ;; use specific font for Korean charset.
  ;; if you want to use different font size for specific charset,
  ;; add :size POINT-SIZE in the font-spec.
  (set-fontset-font t 'hangul (font-spec :name "NanumGothicCoding"))

  ;; you may want to add different for other charset in this way.
)

;; markdown major mode (broken i think)
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;;
;; Stolen from whattheemacsd.com
;;
;; Auto refresh buffers
(global-auto-revert-mode 1)

;; ;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;; only turn on line numbers when GoTo line is on
(global-set-key [remap goto-line] 'goto-line-with-feedback)

(defun goto-line-with-feedback ()
  "Show line numbers temporarily, while prompting for the line number input"
  (interactive)
  (unwind-protect
      (progn
        (linum-mode 1)
        (goto-line (read-number "Goto line: ")))
    (linum-mode -1)))

;; bind webjump to C-x g http://www.neilvandyke.org/webjump/webjump.el
(global-set-key (kbd "C-x g") 'webjump)
(setq webjump-sites
         (append '(
                   ("Chef Docs"           . "docs.getchef.com/search.html")
                   ("Geektools Whois"     .
                    [simple-query "www.geektools.com/whois.html"
                                  "www.geektools.com/geektools-cgi/whois.cgi?query=" ""])
                   ("Github"              .
                    [simple-query "www.github.com" "https://github.com/search?utf8=âœ“&q=" ""])
                   ("Google"              .
                    [simple-query "www.google.com" "www.google.com/search?q=" ""])
                   ("Google Groups"       .
                    [simple-query "groups.google.com" "groups.google.com/groups?q=" ""])
                   ("IMDB"               .
                    [simple-query "www.imdb.com"  "www.imdb.com/find?q=" ""])
                   ("Twitter"            . "www.twitter.com/")
                   ("Wikipedia"          .
                    [simple-query "en.wikipedia.org" "en.wikipedia.org/w/index.php?search=" ""])
                   )))

;; google-this
(global-set-key (kbd "C-c M-g") 'google-this)

;; magit-status
(global-set-key (kbd "C-c g") 'magit-status)

;; shortcut for shell
(global-set-key (kbd "C-c s") 'shell)

;; transpose buffers http://www.emacswiki.org/emacs/TransposeWindows
(defun flip-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

 ;; buffer resize http://www.emacswiki.org/emacs/WindowResize
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)

;; my first fuction in emacs :)
(defun reddit-emacs ()
  "Opens up reddit-emacs"
  (interactive)
  (browse-url "http://reddit.com/r/emacs"))
(global-set-key (kbd "C-c C-r") 'reddit-emacs)

;; git-gutter mode
(add-hook 'ruby-mode-hook 'git-gutter-mode)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(git-gutter:added-sign "+")
 '(git-gutter:deleted-sign "-")
 '(send-mail-function nil)
 '(uniquify-buffer-name-style (quote post-forward) nil (uniquify)))

(require 'ansi-color)

(setq user-mail-address "jj@getchef.com")
(setq user-full-name "JJ Asghar")

;; Global add-hooks
(add-hook 'before-save-hook 'delete-trailing-whitespace) ; time to delete those white spaces

;; zones http://www.emacswiki.org/emacs/ZoneMode
(defun zone-choose (pgm)
   "Choose a PGM to run for `zone'."
   (interactive
    (list
     (completing-read
      "Program: "
      (mapcar 'symbol-name zone-programs))))
   (let ((zone-programs (list (intern pgm))))
     (zone)))

;;
;; Stolen from http://home.thep.lu.se/~karlf/emacs.html
;;

;;
;; Newsticker!
;;
(global-set-key (kbd "C-c C-n") 'newsticker-show-news)
(setq
 ;; newsticker-heading-format "%t"
 ;; newsticker-item-format "%t"
 ;; newsticker-desc-format "%d\n%c"
 ;; newsticker-hide-old-items-in-newsticker-buffer t
 ;; newsticker-html-renderer 'w3m-region
 ;; newsticker-frontend 'newsticker-plainview
 ;; newsticker-use-full-width nil
 newsticker-retrieval-interval 0   ;don't fetch when I'm not reading RSS
 newsticker-automatically-mark-items-as-old nil
 newsticker-url-list '(
                       ("abandonia" "http://www.abandonia.com/en/rss.xml" nil nil nil)
                       ("slashdot" "http://rss.slashdot.org/Slashdot/slashdot" nil nil nil)
                       ("SMBC" "http://www.smbc-comics.com/rss.php" nil nil nil)
                       ("laserbrain" "http://laserbrainstudios.com/feed/" nil nil nil)
                       ("BBC World" "http://feeds.bbci.co.uk/news/world/rss.xml" nil nil nil)
                       ("stallman" "http://www.stallman.org/rss/rss.xml" nil nil nil)

                       ))

;; Remove ^M------------------------------------
;; Call with M-x strip[TAB]
(defun strip-^m ()
  (interactive)
  (goto-char (point-min))
  (while (search-forward "\r" nil nil)
    (replace-match "")))
;;(define-key esc-map "o" 'strip-^m)
;;--------------------------------------------

;;
;;
;;

;; I like two buffers but sometimes i like it vert/horizontal
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;;
;; erc
;;

(defun erc-start-or-switch ()
  "Connect to ERC, or switch to last active buffer"
  (interactive)
  (if (get-buffer "irc.freenode.net:6667") ;; ERC already active?

    (erc-track-switch-buffer 1) ;; yes: switch to last active
    (when (y-or-n-p "Start ERC? ") ;; no: maybe start ERC
      (erc :server "irc.freenode.net" :port 6667 :nick "j^2" :full-name "JJ Asghar")
      (erc :server "irc.paraphysics.net" :port 6667 :nick "j^2" :full-name "notme"))))

(setq erc-autojoin-channels-alist '(("freenode.net" "#openstack-chef" "#chef" "#chef-hacking" "#c6h12o6" "#emacs" "#austindevops"
                                     "#dwarffortress" "#reddit-diabetes" "#reddit-diabetes-ops" "#openstack-operators")
                                    ("paraphysics.net" "#eztv")))
;; if youâ€™d like to join the same channels on any server
;; (setq erc-autojoin-channels-alist '((".*" "#help" "#emacs")))


;; fixing hightlighted names?
(require 'erc-highlight-nicknames)

;; check channels
(erc-track-mode t)
(setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"

                                 "324" "329" "332" "333" "353" "477"))
;; don't show any of this
(setq erc-hide-list '("JOIN" "PART" "QUIT" "NICK"))

;; a nice filler
;;[12:34] <user-one> the quick brown fox jumps over the lazy dog.  the quick
;;       + brown fox jumps over the lazy dog
(setq erc-timestamp-format "[%H:%M] ")
 (setq erc-fill-prefix "      + ")

;; fill width
(make-variable-buffer-local 'erc-fill-column)
 (add-hook 'window-configuration-change-hook
	   '(lambda ()
	      (save-excursion
	        (walk-windows
		 (lambda (w)
		   (let ((buffer (window-buffer w)))
		     (set-buffer buffer)
		     (when (eq major-mode 'erc-mode)
		       (setq erc-fill-column (- (window-width w) 2)))))))))

;; erc growl
(defvar growlnotify-command (executable-find "/usr/local/bin/growlnotify") "The path to growlnotify")

(defun growl (title message)
  "Shows a message through the growl notification system using
 `growlnotify-command` as the program."
  (cl-flet ((encfn (s) (encode-coding-string s (keyboard-coding-system))) )
    (let* ((process (start-process "growlnotify" nil
                                   growlnotify-command
                                   (encfn title)
                                   "-a" "Emacs"
                                   "-n" "Emacs")))
      (process-send-string process (encfn message))
      (process-send-string process "\n")
      (process-send-eof process)))
  t)

(defun my-erc-hook (match-type nick message)
  "Shows a growl notification, when user's nick was mentioned. If the buffer is currently not visible, makes it sticky."
  (unless (posix-string-match "^\\** *Users on #" message)
    (growl
     (concat "ERC: name mentioned on: " (buffer-name (current-buffer)))
     message
     )))

(add-hook 'erc-text-matched-hook 'my-erc-hook)

(load "~/.ercpass")
(require 'erc-services)
(erc-services-mode 1)
(setq erc-prompt-for-nickserv-password nil)
    (setq erc-nickserv-passwords
          `((freenode     (("j^2" . ,freenode-nickone-pass)
                           ("nick-two" . ,freenode-nicktwo-pass)))
            (DALnet       (("nickname" . ,dalnet-pass)))))


;; switch to ERC with Ctrl+c e
(global-set-key (kbd "C-c e") 'erc-start-or-switch) ;; ERC
