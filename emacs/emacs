;;
;; my emacs configuration
;;
;;

;;
;; General Settings I like
;;

;; default tramp to ssh
(setq tramp-default-method "ssh")
;; Turn off the useless toolbar
(tool-bar-mode -1)
;; Show paren mode (http://www.emacswiki.org/emacs/ShowParenMode)
(show-paren-mode 1)
;; backup files because well backupfiles
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)
(setq delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t
)
;; default to text mode
(setq-default major-mode 'text-mode)

;; fix autscrolling because its fucking lame
(setq scroll-step 1)
(setq scroll-conservatively 10000)
(setq auto-window-vscroll nil)

;; fixing up the scratch buffer
(setq initial-major-mode 'ruby-mode)
(setq initial-scratch-message "\
# This buffer is for notes you don't want to save, and for Ruby code.
# If you want to create a file, visit that file with C-x C-f,
# then enter the text in that file's own buffer.")

;; fix Warning(undo): Buffer Buffer list
(add-hook 'Buffer-menu-mode-hook 'buffer-disable-undo)

;; display date and time
(setq display-time-day-and-date t) (display-time)

;; highlight incremental search
(setq query-replace-highlight t)

;; make a larger buffer for M-x shell
(setq comint-buffer-maximum-size 10240)

;; tack on flyspell to text
(add-hook 'text-mode-hook 'flyspell-mode)
(setq ispell-program-name "aspell"
  ispell-extra-args '("--sug-mode=ultra"))
(global-set-key (kbd "M-s M-s") 'ispell-word)

;; visual-regex
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)
;; if you use multiple-cursors, this is for you:
(define-key global-map (kbd "C-c m") 'vr/mc-mark)

;; dash-at-point
(global-set-key "\C-cd" 'dash-at-point)
(global-set-key "\C-ce" 'dash-at-point-with-docset)

;; artbollocks mode
(autoload 'artbollocks-mode "artbollocks-mode")
(add-hook 'text-mode-hook 'artbollocks-mode)
(add-hook 'markdown-mode-hook 'artbollocks-mode)

;; Lorem-ipsum stuff
(autoload 'Lorem-ipsum-insert-paragraphs "lorem-ipsum" "" t)
(autoload 'Lorem-ipsum-insert-sentences "lorem-ipsum" "" t)
(autoload 'Lorem-ipsum-insert-list "lorem-ipsum" "" t)

;; Kill all other buffers
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

;; create scratch buffer
(defun create-scratch-buffer nil
  "create a scratch buffer"
  (interactive)
  (switch-to-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode))

;;
;; Stolen from mattray
;;

;; OSX SETTINGS
(setq default-frame-alist
      '((top . 25) (left . 1)
        (width . 125) (height . 35)))
(set-frame-parameter (selected-frame) 'alpha '(99 95))
(setq mac-option-key-is-meta nil)
(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)
(server-start) ;; so it's listening for the emacsclient alias
(setq ns-pop-up-frames nil) ;; keep OSX from opening more windows
;; 'y' instead of 'yes'
(fset 'yes-or-no-p 'y-or-n-p)
;; always use spaces, never tabs
(setq-default indent-tabs-mode nil)
(setq tab-width 2) ; set the tab width to two
;; skip startup message
(setq inhibit-startup-message t)
(global-set-key "\C-cc" 'comment-region)
(global-set-key "\C-cu" 'uncomment-region)
;; indent-region
(global-set-key "\C-ci" 'indent-region)
;; text size
(global-set-key "\M-+" 'text-scale-increase)
(global-set-key "\M-_" 'text-scale-decrease)
;;
;; end of the stealing from mattray
;;

;;
;; Extentions to emacs
;;

;; Add MELPA for packages --> http://melpa.milkbox.net/
(require 'package)

;; here there's a variable named package-archives, and we are adding the MELPA repository to it
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)

;; loads packages and activates them
(package-initialize)

;; Converted to the solarized-dark theme
;; I also like the wombat,wheatgrass, but lets start here
(load-theme 'solarized-dark t)

;; Everyone loves snippets
(yas-global-mode 1)

;; adding autopair mode
(autopair-global-mode)

;; additional load-path
(add-to-list 'load-path "~/.emacs.d/plugins/")

;; homebrew fix
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))

;; ace-jump-mode
(global-set-key (kbd "C-x SPC") 'ace-jump-char-mode)

;; ido mode
(require 'ido)
(ido-mode t)

;; multicursors
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

;; orgmode
(setq org-log-done 'time)
(setq org-default-notes-file (concat "~/org/notes.org"))
(define-key global-map "\C-ct" 'org-capture)

;; show column markers
(require 'column-marker)
(add-hook 'python-mode-hook (lambda () (interactive) (column-marker-1 80)))
(add-hook 'ruby-mode-hook (lambda () (interactive) (column-marker-1 80)))
(add-hook 'markdown-mode-hook (lambda () (interactive) (column-marker-1 80)))
(add-hook 'diff-mode-hook (lambda () (interactive) (column-marker-1 80)))
(add-hook 'rst-mode-hook (lambda () (interactive) (column-marker-1 80)))
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG" . diff-mode))

;; messing with fonts for macs
(when (eq system-type 'darwin)

  ;; default Latin font (e.g. Consolas)
  (set-face-attribute 'default nil :family "Consolas")

  ;; default font size (point * 10)
  ;;
  ;; WARNING!  Depending on the default font,
  ;; if the size is not supported very well, the frame will be clipped
  ;; so that the beginning of the buffer may not be visible correctly. 
  (set-face-attribute 'default nil :height 165)

  ;; use specific font for Korean charset.
  ;; if you want to use different font size for specific charset,
  ;; add :size POINT-SIZE in the font-spec.
  (set-fontset-font t 'hangul (font-spec :name "NanumGothicCoding"))

  ;; you may want to add different for other charset in this way.
)

;; markdown major mode (broken i think)
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;;
;; Stolen from whattheemacsd.com
;;
;; Auto refresh buffers
(global-auto-revert-mode 1)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;; only turn on line numbers when GoTo line is on
(global-set-key [remap goto-line] 'goto-line-with-feedback)

(defun goto-line-with-feedback ()
  "Show line numbers temporarily, while prompting for the line number input"
  (interactive)
  (unwind-protect
      (progn
        (linum-mode 1)
        (goto-line (read-number "Goto line: ")))
    (linum-mode -1)))

;; bind webjump to C-x g http://www.neilvandyke.org/webjump/webjump.el
(global-set-key (kbd "C-x g") 'webjump)
(setq webjump-sites
         (append '(
                   ("Chef Docs"           . "docs.getchef.com/search.html")
                   ("Geektools Whois"     .
                    [simple-query "www.geektools.com/whois.html"
                                  "www.geektools.com/geektools-cgi/whois.cgi?query=" ""])
                   ("Github"              . 
                    [simple-query "www.github.com" "https://github.com/search?utf8=âœ“&q=" ""])
                   ("Google"              .
                    [simple-query "www.google.com" "www.google.com/search?q=" ""])
                   ("Google Groups"       .
                    [simple-query "groups.google.com" "groups.google.com/groups?q=" ""])
                    ("IMDB"               .
                     [simple-query "www.imdb.com"  "www.imdb.com/find?q=" ""])
                    ("Twitter"            . "www.twitter.com/")
                    ("Wikipedia"          .
                     [simple-query "en.wikipedia.org" "en.wikipedia.org/w/index.php?search=" ""])

                   )))

;; google-this 
(global-set-key (kbd "C-x C-g") 'google-this)

;; magit-status
(global-set-key (kbd "C-c g") 'magit-status)

;; transpose buffers http://www.emacswiki.org/emacs/TransposeWindows
(defun transpose-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

 ;; buffer resize http://www.emacswiki.org/emacs/WindowResize
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)

;; my first fuction in emacs :)
(defun reddit-emacs ()
  "Opens up reddit-emacs"
  (interactive)
  (browse-url "http://reddit.com/r/emacs"))
(global-set-key (kbd "C-x C-r") 'reddit-emacs)

;; git-gutter mode
(add-hook 'ruby-mode-hook 'git-gutter-mode)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(git-gutter:added-sign "+")
 '(git-gutter:deleted-sign "-")
 '(uniquify-buffer-name-style (quote post-forward) nil (uniquify)))

(require 'ansi-color)
